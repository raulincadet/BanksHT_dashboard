z[[i]]=unlist(df1%>%filter(Indicators_en==Indic)%>%select(Bk[i]))
}
yy=rowSums(data.frame(z))
g=growth(yy)*100
s=sd(yy,na.rm = T) # standard deviation of the sum of the indicator for all selected banks
mg=mean(g,na.rm=T)  # average growth of rate of the sum of th selected indicator for all selected banks
m=(mean(unlist(z),na.rm=T))/1000 # mean of values of selected indicator for all selected banks
dd=data.frame(Sd=s,MeanG=mg,Mean=m)
return(dd)
}
##########################3
findic_xts<-function(ind,bk){# function to create a list of time series by bank selected for an indicator
require(dplyr)
da=unlist(df1%>%filter(Indicators_en==ind)%>%select(Date))
names(da)=c(df1%>%filter(Indicators_en==ind)%>%select(Date1))
xts::xts(df1%>%filter(Indicators_en==ind)%>%select(bk),
order.by = as.Date(da))
}
##################################
correlat_pairs<-function(ind,bk){ # function to calculate correlation between pairs of banks
df=cbind.data.frame(findic_xts(ind,bk=bk))
zo=NULL
for (i in colnames(df)) { # to look for columns with only NA
zo[i]=!is.na(df[,i])
}
df=df[,zo] # to remove banks with only NA as values
bk_pairs=data.frame(t(data.frame(combn(colnames(df),2))))
corr=NULL;pval=NULL
for(i in 1:nrow(bk_pairs)){
corr[i]=(cor.test(df[,bk_pairs[i,1]],df[,bk_pairs[i,2]]))$estimate
pval[i]=(cor.test(df[,bk_pairs[i,1]],df[,bk_pairs[i,2]]))$p.value
}
bk_pairs$corr=corr
bk_pairs$pval=pval
bk_pairs
}
#################graph_from_data_frame(d, directed = TRUE, vertices = NULL)
fnetwork<-function(ind,bk){
df_net=correlat_pairs(ind,bk)
df_net=df_net%>%filter(pval<0.05)%>%
filter(corr>0.5)%>%
mutate(color=ifelse(corr>=0,"forestgreen","red"))%>%
mutate(weight=corr*(1-pval))%>%
filter(weight>=0) # selected only positive weight, then positive correlation
gogo=igraph::graph_from_data_frame(df_net, directed = FALSE, vertices = NULL)
do=data.frame(as.vector(igraph::V(gogo)),igraph::degree(gogo))
# import=do[do[,2]==max(do[,2],na.rm = T),][,1] # most important bank
deg=data.frame(degree(gogo))
colnames(deg)="Degree"
deg$label=rownames(deg)
import=deg[deg[,1]==max(deg[,1]),"label"] # most important bank
least=deg[deg[,1]==min(deg[,1]),"label"] # less important bank
robust=ifelse(is_connected(gogo,mode="strong")==TRUE,"strong connections",
ifelse(is_connected(gogo,mode="weak")==TRUE,"weak connections","several components"))
components=igraph::count_components(gogo)
##############
fimport=function(){ # function to add a text instead of list of banks if all have the same number of connections
y=NULL
for (i in 1:length(import)) {
if(length(import)==nrow(deg)){
y[i]="indeed, all the banks of the network have the same number of connections "
}else{
y[i]=import[i]
}
}
return(unique(y))
}
import1=fimport()
##############
fleast=function(){ # function to add a text instead of list of banks if all have the same number of connections
y=NULL
for (i in 1:length(least)) {
if(length(least)==nrow(deg)){
y[i]="indeed, none of the banks of the network, since they have the same number of connections. "
}else{
y[i]=least[i]
}
}
return(unique(y))
}
least1=fleast()
#############################
z=list(graph=gogo,important=import1,components=components,robust=robust,leastImport=least1)
return(z)
}
###################
fgraph_network<-function(gogo){ # x is an igraph object. this function should plot it
igraph::plot.igraph(gogo,
layout=igraph::layout.kamada.kawai(gogo),
# layout=igraph::layout.circle(gogo),
# layout=igraph::layout.davidson.harel(gogo),
#edge.curved=TRUE,
edge.dist=5,
label.cex=4,
label.color="red",
# edge.arrow.size=.4, # taille des liens
vertex.size=20, #t= taille des noeuds
# vertex.color=nodes$nodes_color,
vertex.label.color="black",
vertex.frame.color="gray",
#edge.label=edges$sign,
edge.label.color="red",
# edge.arrow.size=0.25,
# edge.color=igraph::edge.attributes(gogo)$color
# edge.color=edges$sign,
)
# legend(x=-1.2, y=-0.98, c("Positive correlation",
#                           "Negative correlation"), pch=22,
#        col="#777777", pt.bg=c("forestgreen","orangered"), pt.cex=0.95, cex=.8, bty="n", ncol=1)
}
################################
unique(df1$Indicators_en)
fratios<-function(ind1,ind2){
}
###############
fdf_ratios<-function(){
npl_on_loans=fgraph_xts("Non performing loan",banks_names)/fgraph_xts("Loan portfolio",banks_names)
profit_on_equity=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Equity",banks_names)
profit_on_assets=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Assets",banks_names)
return(list(npl_on_loans,profit_on_equity,profit_on_assets))
}
################################
#cor(data.frame(fdecomp("Asset",c("BNC","BUH","UNIBNK","SOGEBK","BPH","CAPITALBK"))))
########################33
# fdecompose_xts("Equity","BUH")
# fdecompose_xts("Equity","BIDC")
# ##########################################
load("banksHT.rda")
indicators_names=unique(df1$Indicators_en)
banks_names=colnames(df1)[!colnames(df1)%in% c("Indicators","Indicators_en","Date","Date1","Parts1_fr","Parts2_fr","Parts1_en","Parts2_en")]
dates_list=as.Date(unique(df1$Date))
names(dates_list)<-as.yearqtr(dates_list)
fgraph_xts("Assets",banks_names)
fgraph_xts("Equity",banks_names
)
fgraph_xts("Assets",banks_names)
fgraph_xts("Assets",banks_names)
fdecompose_xts("Assets",banks_names)
runApp()
fdecompose_xts("Asset",banks_names)
fdecompose_xts("Equity",banks_names)
banks_names
########################33
# fdecompose_xts("Equity","BUH")
# fdecompose_xts("Equity","BIDC")
# ##########################################
load("banksHT.rda")
indicators_names=unique(df1$Indicators_en)
banks_names=colnames(df1)[!colnames(df1)%in% c("Indicators","Indicators_en","Date","Date1","Parts1_fr","Parts2_fr","Parts1_en","Parts2_en")]
dates_list=as.Date(unique(df1$Date))
names(dates_list)<-as.yearqtr(dates_list)
fdecompose_xts("Equity",banks_names)
##########
dadou=data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names);dadou
library(dplyr)
##########
dadou=data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names);dadou
fdf_ratios()
shiny::runApp()
##########
dadou=data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names);dadou
gauge<-googleVis::gvisGauge(dadou[2,c("Banks","2001-12-01")],labelvar = "Banks",
options=list(min=0, max=1, redFrom=0,
redTo=0.3, yellowFrom=0.3, yellowTo=0.5,
greenFrom=0.5, greenTo=1, width=800,
height=600))                    ;plot(gauge)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(dygraphs)
library(forcats)
library(igraph)
library(googleVis)
##########################333
gtheme<-function(...){ # a theme gor ggplot2 graphics
theme_classic()+
theme(axis.ticks = element_blank(),
axis.line=element_blank(),
axis.text = element_text(colour="black"),
plot.margin = margin(1,1,1,3)
)+
theme(legend.position = "none", legend.direction = "horizontal")
}
#############33
fgraph_xts<-function(ind,bk){
require(dplyr)
da=unlist(df1%>%filter(Indicators_en==ind)%>%select(Date))
names(da)=unlist(df1%>%filter(Indicators_en==ind)%>%select(Date1))
xts::xts(df1%>%filter(Indicators_en==ind)%>%select(bk),
order.by = as.Date(da))
}
##############
fdecompose_xts<-function(ind,bk){
require(dplyr)
da=unlist(df1%>%filter(Indicators_en==ind)%>%select(Date))
names(da)=c(df1%>%filter(Indicators_en==ind)%>%select(Date1))
####################################
start=c(integer(unlist(stringr::str_split(min(da),"-"))[1]),integer(unlist(stringr::str_split(min(da),"-"))[2]))
trying=try((ts(df1%>%filter(Indicators_en==ind)%>%select(bk),
start = start,frequency = 4 )%>%decompose())$seasonal[1:4])
if (class(trying) == "try-error"){
df=data.frame(c(0.01,0.01,0.01,0.01))
colnames(df)=bk
je=xts::xts(df%>%select(bk),order.by = as.Date(c("0000-03-01","0000-06-01","0000-09-01","0000-12-01")  ))
}else{
y=(ts(df1%>%filter(Indicators_en==ind)%>%select(bk),
start = start,frequency = 4 )%>%decompose())$seasonal[1:4]
seas=data.frame(y);colnames(seas)=bk
je=xts::xts(seas%>%select(bk),order.by =as.Date(c("0000-03-01","0000-06-01","0000-09-01","0000-12-01") ))
}
return(je)
}
fdecomp<-function(Indic,Bk){
y=NULL
for (i in 1:length(Bk)) {
y[[i]]=fdecompose_xts(Indic,Bk[i])
}
df=data.frame(y)
return(df)
}
###################3
fstats<-function(Indic,Bk){# growth rate for
growth=function(x){
y=NULL
for (i in 1:length(x)) {
y[i]=(x[i]-x[i-1])/x[i-1]
}
y
}
############
z=NULL
for(i in 1:length(Bk)){
z[[i]]=unlist(df1%>%filter(Indicators_en==Indic)%>%select(Bk[i]))
}
yy=rowSums(data.frame(z))
g=growth(yy)*100
s=sd(yy,na.rm = T) # standard deviation of the sum of the indicator for all selected banks
mg=mean(g,na.rm=T)  # average growth of rate of the sum of th selected indicator for all selected banks
m=(mean(unlist(z),na.rm=T))/1000 # mean of values of selected indicator for all selected banks
dd=data.frame(Sd=s,MeanG=mg,Mean=m)
return(dd)
}
##########################3
findic_xts<-function(ind,bk){# function to create a list of time series by bank selected for an indicator
require(dplyr)
da=unlist(df1%>%filter(Indicators_en==ind)%>%select(Date))
names(da)=c(df1%>%filter(Indicators_en==ind)%>%select(Date1))
xts::xts(df1%>%filter(Indicators_en==ind)%>%select(bk),
order.by = as.Date(da))
}
##################################
correlat_pairs<-function(ind,bk){ # function to calculate correlation between pairs of banks
df=cbind.data.frame(findic_xts(ind,bk=bk))
zo=NULL
for (i in colnames(df)) { # to look for columns with only NA
zo[i]=!is.na(df[,i])
}
df=df[,zo] # to remove banks with only NA as values
bk_pairs=data.frame(t(data.frame(combn(colnames(df),2))))
corr=NULL;pval=NULL
for(i in 1:nrow(bk_pairs)){
corr[i]=(cor.test(df[,bk_pairs[i,1]],df[,bk_pairs[i,2]]))$estimate
pval[i]=(cor.test(df[,bk_pairs[i,1]],df[,bk_pairs[i,2]]))$p.value
}
bk_pairs$corr=corr
bk_pairs$pval=pval
bk_pairs
}
#################graph_from_data_frame(d, directed = TRUE, vertices = NULL)
fnetwork<-function(ind,bk){
df_net=correlat_pairs(ind,bk)
df_net=df_net%>%filter(pval<0.05)%>%
filter(corr>0.5)%>%
mutate(color=ifelse(corr>=0,"forestgreen","red"))%>%
mutate(weight=corr*(1-pval))%>%
filter(weight>=0) # selected only positive weight, then positive correlation
gogo=igraph::graph_from_data_frame(df_net, directed = FALSE, vertices = NULL)
do=data.frame(as.vector(igraph::V(gogo)),igraph::degree(gogo))
# import=do[do[,2]==max(do[,2],na.rm = T),][,1] # most important bank
deg=data.frame(degree(gogo))
colnames(deg)="Degree"
deg$label=rownames(deg)
import=deg[deg[,1]==max(deg[,1]),"label"] # most important bank
least=deg[deg[,1]==min(deg[,1]),"label"] # less important bank
robust=ifelse(is_connected(gogo,mode="strong")==TRUE,"strong connections",
ifelse(is_connected(gogo,mode="weak")==TRUE,"weak connections","several components"))
components=igraph::count_components(gogo)
##############
fimport=function(){ # function to add a text instead of list of banks if all have the same number of connections
y=NULL
for (i in 1:length(import)) {
if(length(import)==nrow(deg)){
y[i]="indeed, all the banks of the network have the same number of connections "
}else{
y[i]=import[i]
}
}
return(unique(y))
}
import1=fimport()
##############
fleast=function(){ # function to add a text instead of list of banks if all have the same number of connections
y=NULL
for (i in 1:length(least)) {
if(length(least)==nrow(deg)){
y[i]="indeed, none of the banks of the network, since they have the same number of connections. "
}else{
y[i]=least[i]
}
}
return(unique(y))
}
least1=fleast()
#############################
z=list(graph=gogo,important=import1,components=components,robust=robust,leastImport=least1)
return(z)
}
###################
fgraph_network<-function(gogo){ # x is an igraph object. this function should plot it
igraph::plot.igraph(gogo,
layout=igraph::layout.kamada.kawai(gogo),
# layout=igraph::layout.circle(gogo),
# layout=igraph::layout.davidson.harel(gogo),
#edge.curved=TRUE,
edge.dist=5,
label.cex=4,
label.color="red",
# edge.arrow.size=.4, # taille des liens
vertex.size=20, #t= taille des noeuds
# vertex.color=nodes$nodes_color,
vertex.label.color="black",
vertex.frame.color="gray",
#edge.label=edges$sign,
edge.label.color="red",
# edge.arrow.size=0.25,
# edge.color=igraph::edge.attributes(gogo)$color
# edge.color=edges$sign,
)
# legend(x=-1.2, y=-0.98, c("Positive correlation",
#                           "Negative correlation"), pch=22,
#        col="#777777", pt.bg=c("forestgreen","orangered"), pt.cex=0.95, cex=.8, bty="n", ncol=1)
}
################################
# unique(df1$Indicators_en)
# fratios<-function(ind1,ind2){
#
# }
foperatEx=function(){ # function to retrieve name of elements of operating expenses
z=unique(df1$Indicators_en)
y=NULL
for (i in 1:length(z)) {
x=tolower(z[i])
#x=stringi::stri_split(x,regex=" ")
y[[i]]=grepl(pattern = "(Operating expenses)",z[i])
}
#names(y)=z
indicOp=z[unlist(y)] # vector of names of operating expenses elements
opex=NULL
for (j in indicOp) {
opex[[j]]=fgraph_xts(j,banks_names)
}
opex # list of cbind data frame of xts variables
op_ex=opex[[1]]
for(h in 2:length(indicOp)){
op_ex=op_ex+opex[[h]]
}
op_ex  # total of operating expenses
}
###############
fdf_ratios<-function(){ # these results have been verified to ensure that the code is correct to calcule the ratios
npl_on_loans=fgraph_xts("Non performing loan",banks_names)/fgraph_xts("Loan portfolio",banks_names)
profit_on_equity=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Equity",banks_names)
profit_on_assets=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Asset",banks_names)
operatingExp_on_netBankingInc=foperatEx()/fgraph_xts("Net banking income",banks_names) # Cost to Income Ratio
equity_on_assets=fgraph_xts("Equity",banks_names)/fgraph_xts("Asset",banks_names)
exchangeGains_on_NetBankingIncome=fgraph_xts("Foreign exchange gains(Other income)" ,banks_names)/fgraph_xts("Net banking income",banks_names)
return(list(`NPL ratio`=npl_on_loans,ROE=profit_on_equity,ROA=profit_on_assets,`Exchange gains or loss to net banking income`=exchangeGains_on_NetBankingIncome,
`Efficiency ratio`=operatingExp_on_netBankingInc,`Financial leverage`=equity_on_assets))
}
###
dadou<-data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
################################
#cor(data.frame(fdecomp("Asset",c("BNC","BUH","UNIBNK","SOGEBK","BPH","CAPITALBK"))))
########################33
# fdecompose_xts("Equity","BUH")
# fdecompose_xts("Equity","BIDC")
# ##########################################
load("banksHT.rda")
indicators_names=unique(df1$Indicators_en)
banks_names=colnames(df1)[!colnames(df1)%in% c("Indicators","Indicators_en","Date","Date1","Parts1_fr","Parts2_fr","Parts1_en","Parts2_en")]
dates_list=as.Date(unique(df1$Date))
names(dates_list)<-as.yearqtr(dates_list)
##########
dadou=data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names);dadou
gauge<-googleVis::gvisGauge(dadou[2,c("Banks","2001-12-01")],labelvar = "Banks",
options=list(min=0, max=1, redFrom=0,
redTo=0.3, yellowFrom=0.3, yellowTo=0.5,
greenFrom=0.5, greenTo=1, width=800,
height=600))                    ;plot(gauge)
runApp()
fdf_ratios()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(fdf_ratios()[[2]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
data.frame(fdf_ratios()[[3]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
data.frame(fdf_ratios()[[3]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
data.frame(fdf_ratios()[[4]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
fdf_ratios()
fdf_ratios()[[4]]
length(fdf_ratios())
fdf_ratios()[[5]]
runApp()
fdf_ratios()
###############
fdf_ratios<-function(){ # these results have been verified to ensure that the code is correct to calcule the ratios
npl_on_loans=fgraph_xts("Non performing loan",banks_names)/fgraph_xts("Loan portfolio",banks_names)
profit_on_equity=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Equity",banks_names)
profit_on_assets=fgraph_xts("Net profit (loss)",banks_names)/fgraph_xts("Asset",banks_names)
operatingExp_on_netBankingInc=foperatEx()/fgraph_xts("Net banking income",banks_names) # Cost to Income Ratio
equity_on_assets=fgraph_xts("Equity",banks_names)/fgraph_xts("Asset",banks_names)
# exchangeGains_on_NetBankingIncome=fgraph_xts("Foreign exchange gains(Other income)" ,banks_names)/fgraph_xts("Net banking income",banks_names)
return(list(`NPL ratio`=npl_on_loans,ROE=profit_on_equity,ROA=profit_on_assets,
`Efficiency ratio`=operatingExp_on_netBankingInc,`Financial leverage`=equity_on_assets))
}
data.frame(fdf_ratios()[[1]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
runApp()
12/5
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_leverage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(fdf_ratios()[[5]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
runApp()
data.frame(fdf_ratios()[[4]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
data.frame(fdf_ratios()[[3]])%>%
t()%>%as.data.frame()%>%
mutate(Banks=banks_names)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
